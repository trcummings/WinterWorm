const webpack = require('webpack');
const path = require('path');

// const { sequelize } = require('./orm/models');

// console.log(sequelize);
// const CircularDependencyPlugin = require('circular-dependency-plugin');
// const ClosureCompiler = require('google-closure-compiler-js').webpack;

// const isProd = process.env.NODE_ENV === 'production';

const DIST_PATH = path.join(__dirname, './dist');

class DBPlugin {
  constructor() {
    this.startTime = Date.now();
    this.prevTimestamps = {};

    this.onEmit = this.onEmit.bind(this);
  }

  apply(compiler) {
    compiler.plugin('emit', this.onEmit);
  }

  onEmit(compilation, cb) {
    const changedFiles = [];
    const timestamps = compilation.fileTimestamps;

    for (const entry of timestamps) {
      const [watchFile, currentTimeTouched] = entry;
      const lastTimeTouched = this.prevTimestamps[watchFile] || this.startTime;

      if (lastTimeTouched < currentTimeTouched) changedFiles.push(watchFile);
    }

    this.prevTimestamps = timestamps;

    cb();
  }
}

module.exports = {
  mode: 'development',
  context: __dirname,
  target: 'electron-main',
  devtool: 'inline-source-maps',
  entry: {
    app: './src/app/app.js',
    game: './src/game/game.js',
    editor: './src/editor/Editor.jsx',
    config: './src/config/Config.jsx',
  },
  output: {
    filename: '[name].js',
    path: DIST_PATH,
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              '@babel/preset-env',
              '@babel/preset-flow',
              '@babel/preset-react',
            ],
            plugins: [
              '@babel/plugin-proposal-class-properties',
              '@babel/plugin-proposal-object-rest-spread',
              'transform-es2015-arrow-functions',
              '@babel/plugin-syntax-dynamic-import',
            ],
          },
        },
      },
    ],
  },
  resolve: {
    modules: ['node_modules'],
    alias: {
      Editor: path.resolve(__dirname, './src/editor'),
      Game: path.resolve(__dirname, './src/game'),
      App: path.resolve(__dirname, './src/app'),
      Config: path.resolve(__dirname, './src/config'),
      Engine: path.resolve(__dirname, './src/game/engine'),
      Types: path.resolve(__dirname, './src/game/engine/types'),
      Symbols: path.resolve(__dirname, './src/game/engine/symbols'),
    },
    extensions: ['.js', '.jsx', '.css', '.json'],
  },
  plugins: [
    new DBPlugin(),
    new webpack.NamedModulesPlugin(),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.DefinePlugin({
      'process.env.DEBUG_GAME': JSON.stringify(process.env.DEBUG_GAME),
      'process.env.DEBUG_EDITOR': JSON.stringify(process.env.DEBUG_EDITOR),
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
      'process.env.SRC_PATH': JSON.stringify(path.resolve(__dirname, './src')),
      'process.env.ASSET_PATH': JSON.stringify(path.resolve(__dirname, './src/game/assets')),
      'process.env.GAME_OBJECT_SPECS': JSON.stringify(path.resolve(__dirname, './src/game/gameObjectSpecs')),
      'process.env.COMPONENT_SPEC_PATH': JSON.stringify(path.resolve(__dirname, './src/game/gameObjectSpecs/componentSpecs')),
      'process.env.SYSTEM_SPEC_PATH': JSON.stringify(path.resolve(__dirname, './src/game/gameObjectSpecs/systemSpecs')),
      'process.env.CONFIG_PATH': JSON.stringify(path.resolve(__dirname, './src/config')),
      'process.env.BACKEND_INDEX_PATH': JSON.stringify(path.resolve(__dirname, './src/backend/index.js')),
      'process.env.EDITOR_FILES_PATH': JSON.stringify(path.resolve(__dirname, './editorFiles')),
    }),
  // ]
  // plugins: isProd ? [
  //   new ClosureCompiler({
  //     options: {
  //       languageIn: 'ECMASCRIPT6',
  //       languageOut: 'ECMASCRIPT5',
  //       compilationLevel: 'ADVANCED',
  //       warningLevel: 'VERBOSE',
  //     },
  //   }),
  // ] : [
    // new CircularDependencyPlugin({
    //   // exclude detection of files based on a RegExp
    //   exclude: /a\.js|node_modules/,
    //   // add errors to webpack instead of warnings
    //   failOnError: true,
    //   // set the current working directory for displaying module paths
    //   cwd: process.cwd(),
    //   onDetected({ module: webpackModuleRecord, paths, compilation }) {
    //     // `paths` will be an Array of the relative module paths that make up the cycle
    //     // `module` will be the module record generated by webpack that caused the cycle
    //     compilation.errors.push(new Error(paths.join(' -> ')));
    //     compilation.errors.push(new Error(webpackModuleRecord));
    //   },
    // }),
  ],
};
